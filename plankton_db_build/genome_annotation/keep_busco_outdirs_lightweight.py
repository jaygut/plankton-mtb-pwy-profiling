#!/usr/bin/env python

"""
    Code developed to perform a series of data management and reformatting tasks on BUSCO runs.

    Author: jayson.gutierrez@vliz.be

"""

from subprocess import Popen, call, STDOUT, PIPE
import time
import sys
import pandas as pd
import os
import glob
import shutil
import numpy as np
from collections import OrderedDict
#deepest is a tool to determine the maximum depth and path length within the current (or a specified) directory tree. To install do: pip install deepest
import deepest
import re

def runShell(cmd):
    process = Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE, universal_newlines=True)
    out, err = process.communicate()   
    return out, err

def get_all_busco_out_dirs(dir_main = "Results_Augustus"):
    """Get the list of all species whose genomes have been already processed via BUSCO"""
    subdirs_list = glob.glob(os.path.join(dir_main,"*"))
    if(len(subdirs_list)>0):
        busco_out_dirs = [os.path.basename(f) for f in subdirs_list if os.path.isdir(f)]
        busco_out_dirs_sorted = sorted(busco_out_dirs, key=lambda s:s[0])
        return busco_out_dirs_sorted
    else:
        return []

def fn_checker(fn_patts,target_str): 
    """Folder name checker based on str patterns"""
    target_str_split = np.array(re.split("\W+|_|\.\W+",target_str))
    if( (target_str_split.shape[0]==fn_patts.shape[0]) and 
       (np.all(target_str_split==fn_patts)) ):
        return True
    else:
        return False

def clean_busco_run_outdirs(sps_name, dir_main = "Results_Augustus"):
    """Function to clean certain files from each busco run, and keep output dirs lightweight
       Cleaning all output dirs available on dir: Results_Augustus"""

    #Set species name subdir
    sps_subdir_name = os.path.join(dir_main,sps_name)
    
    #Get path to augustus retraining subdir
    aug_retrain_params_dir = glob.glob(os.path.join(sps_subdir_name,"run*_odb*","augustus_output","retraining_parameters"))

    #Cleaning files/subdirs in nested subdirs
    if(len(aug_retrain_params_dir)==0): #Check if augustus retraining_parameters subdir exists and is not empty
        print("Deleting entire subdir: {}".format(sps_subdir_name))
        runShell("rm -rf {}".format(sps_subdir_name))
    else:
        #List contents of deepest subdir in retraining_parameters
        deepest_augustus_path_cont = os.listdir(deepest.get_depth(aug_retrain_params_dir[0])[0])
        if(len(deepest_augustus_path_cont)==0):
            print("Deleting entire subdir: {} because deepest subdir in retraining_parameters is empty!".format(sps_subdir_name))
            runShell("rm -rf {}".format(sps_subdir_name))

        else: #Otherwise, remove a bunch of BUSCO-generated subdirs to keep the main dir lightweight!
            if(len(os.listdir(sps_subdir_name))>0):
                #Remove unnecessary files at one level down in the dir hierarchy
                files2del_list0 = [os.path.join(sps_subdir_name,f) for f in os.listdir(sps_subdir_name) if('_odb' not in f)]
                if(len(files2del_list0)>0):
                    for fd in files2del_list0:
                        print("Deleting subdir: {}".format(fd))
                        runShell("rm -rf {}".format(fd)) 

                #Remove unnecessary files at one extra level further down in the dir hierarchy
                #Fetch only subdir *_odb
                odb_dir_cont = glob.glob(os.path.join(sps_subdir_name,"run*_odb*"))
                odb_dir = [f for f in odb_dir_cont if os.path.isdir(f)]
                if(len(odb_dir)>0):
                    odb_dir_cont = os.listdir(odb_dir[0])
                    files2del_list1 = [os.path.join(odb_dir[0],f) for f in odb_dir_cont if(("blast_output" in f) or ("hmmer_output" in f))]
                    #Check if some folders are to be deleted!
                    if(len(files2del_list1)>0):
                        for fd in files2del_list1:
                            print("Deleting subdir: {}".format(fd))
                            runShell("rm -rf {}".format(fd))



if __name__ == "__main__":
    #Get species dirs generated by BUSCO runs
    busco_out_dirs = get_all_busco_out_dirs(dir_main = "Results_Augustus")    
    for sps_name in busco_out_dirs:
        print("Cleaning dir: {}".format(sps_name))
        clean_busco_run_outdirs(sps_name, dir_main = "Results_Augustus")
        print("\n")    
    print("###############################################")
    #Get total number of dirs after cleaning
    busco_out_dirs = get_all_busco_out_dirs(dir_main = "Results_Augustus")    
    n = str(len(busco_out_dirs))
    print("Total number of BUSCO output directories kept for running Augustus with hint files is: {} ".format(n))
